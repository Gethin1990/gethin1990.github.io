<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Gethin</title><link>https://blog.gethin.online/en/posts/</link><description>All Posts | Gethin</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>gexu1990@hotmail.com (Gethin)</managingEditor><webMaster>gexu1990@hotmail.com (Gethin)</webMaster><lastBuildDate>Thu, 08 Jul 2021 10:52:39 +0800</lastBuildDate><atom:link href="https://blog.gethin.online/en/posts/" rel="self" type="application/rss+xml"/><item><title>Software Architecture Pattern</title><link>https://blog.gethin.online/en/software-architecture-pattern/</link><pubDate>Thu, 08 Jul 2021 10:52:39 +0800</pubDate><author>Author</author><guid>https://blog.gethin.online/en/software-architecture-pattern/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>Application Landscappace Monolith  Advantages  Easy to understand,implement,and test Easy deployment Ideal for limited scope   Disadvantages  Tight coupling Easily leads to complex code One size fit all for every subdomain    N-tier  Summary  Multiple tiers Tier perform specific task Tiers can be physically separated Tiers aren&rsquo;t layers Technical boundaries   Typical: 3 tier  Prsentation Tier(UI &amp; pure UI logic) Business Logic Tier(business logic) Data Tier   Advantages  Independent development Scalability   Disadvantages  Changes ripple through tiers    Service-Oriented  Summary  Multiple services Each service is a business activity Service composability Contract standardization Enterprise Service Bus   Advantages  Servies are loosely coupled Scalablility No duplication of functionality   Disadvantages  Reduced agility and team autonomy Costly Many differing views    Microservices  Summary  Multiple services Each service is a business activity Teams run the service No logic-heavy enterprise service bus Maximum automate   Advantages  Services are loosely coupled and eaily scalable Increased agility Reliability Designed to handle failures   Disadvantages  Boundaries not always clear Communication patterns can become complex    Serverless  Summary  Backend as a service Function as a service    peer-to-peer  Summary  No central server No constant connection Dynamically discoverable   Advantages  Share resources Save cost Scaling   Disadvantages  possible security issues Only for specific scenarios Nontrivial to code    Application Structure Patterns Layered  Summary  Presentation(UI) Application(Translation between UI &amp; busniess) Business(Business logic) Persistence(Code to interact with the database) Data(Data)   Advantages  well-known among developers Easy to organize   Disadvantages  Can lead to monolithic applications Need to write lots of code    Microkernel  Summary  Task scheduler Workflow Data processing Browser Graphic designer   Advantages  Flexibility Clean sparation Separate tems possible Add and remove functionality at runtime   Disadvantages  Core API might not fit future plugins Can the plugins be trusted Not always clear what belongs in the core    CQRS  Summary  Command Query Responsibility Segregation 2 models: read/query &amp; write/command Allows for scenario-specific queries Synchronization required Different from event sourcing   Advantages  Simpler read queries Faster and more scalable read queries Easier to communicate with stakeholders   Disadvantages  Added complexity Learning curve Possibility of data inconsistencies Eventual consistency    Event sourcing  Summary  Store events instead of current state Event = something that happened in the past Rehydration or replay   Advantages  Trace of events Audit trail Business language Event replay   Disadvantages  Replay and external systems Event structure changes Snapshots    CQRS and Event sourcing combined  Summary  2 different concepts Powerful combination It&rsquo;s not for simple domains, you could start with event sourcing, then add CQRS later.]]></description></item><item><title>HTTP response status codes</title><link>https://blog.gethin.online/en/http-status-code/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://blog.gethin.online/en/http-status-code/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/web-3967926_1280-2021-06-10-16-37-50.jpg" referrerpolicy="no-referrer">
            </div>HTTP response status codes HTTP response status codes indicate whether a specific HTTP request has been successfully completed.
Responses are grouped in five classes:
 Informational responses (100–199) Successful responses (200–299) Redirects (300–399) Client errors (400–499) Server errors (500–599)  The below status codes are defined by section 10 of RFC 2616. You can find an updated specification in RFC 7231.
If you receive a response that is not in this list, it is a non-standard response, possibly custom to the server&rsquo;s software.
Information responses 100 Continue This interim response indicates that everything so far is OK and that the client should continue the request, or ignore the response if the request is already finished.]]></description></item><item><title>First_post</title><link>https://blog.gethin.online/en/first-post/</link><pubDate>Thu, 06 May 2021 20:40:14 +0800</pubDate><author>Author</author><guid>https://blog.gethin.online/en/first-post/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>First Post some test content</description></item><item><title>Third Wedding Anniversary (Museum)</title><link>https://blog.gethin.online/en/third-wedding-anniversary-museum/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://blog.gethin.online/en/third-wedding-anniversary-museum/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>Third Wedding Anniversary (Museum) Time fly, this is a special day because it is my 3rd wedding anniversary. Last sunday，we went to Shanghai Center Town. Lucky, it is no rain that day. As you know, it is alway rain in Rainy Season in Shanghai. My wife found a funny place in dazhong dianping (大众点评) app. The place is in 38 floor of Shanghai Center Tower named 宝库匠心馆(3A). Awesome, there are a lot of beautful things. The treasures are</description></item><item><title>Introduce Microservice &amp; Infrastructure on Cloud</title><link>https://blog.gethin.online/en/introduce-microservice-infrastructure-on-cloud/</link><pubDate>Fri, 17 Apr 2020 07:46:49 +0000</pubDate><author>Author</author><guid>https://blog.gethin.online/en/introduce-microservice-infrastructure-on-cloud/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>This article will introduce Microservice &amp; Infrastructure on Cloud. Iaas &amp; Paas &amp; Saas Virtual Machine &amp; Container Docker &amp; Kubernetes Most Basic Architecture Azure Kubernets Service - AKS Iaas &amp; Paas &amp; Saas Infrastructure-as-a-service Platform-as-a-service Software-as-a-service https://www.sherweb.com/blog/cloud-server/what-is-azure-paas/ Virtual Machine &amp; Container Virtual Machine: Traditional development &amp; deployment，such as IIS &amp; tomcat Container: Platform independence: Build it once, run it anywhere Resource efficiency and density Effective isolation and resource sharing Speed: Start, create, replicate or destroy containers in seconds Immense and smooth scaling Operational simplicity Improved]]></description></item><item><title>How to setup kubernetes on Azure</title><link>https://blog.gethin.online/en/how-to-setup-kubernetes-on-azure/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://blog.gethin.online/en/how-to-setup-kubernetes-on-azure/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>Step 1. How to set AKS Cluster in Azure This step could reference the official documents as below, https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
Step 2 Open the could shell )
The link as https://shell.azure.com/
And input the Command as below
1  az aks get-credentials --resource-group AKSGroup --name AKSCluster   Step 3 install Prometheus How to create change nampspace :
1 2  kuebctl create ns monitoring kubectl config set-context --current --namespace=monitoring   The install command as below,
1  helm install stable/prometheus --name kube-prometheus --set rbac.create=true --namespace monitoring   If you met the issue like
 Error: namespaces &ldquo;monitoring&rdquo; is forbidden: User &ldquo;system:serviceaccount:kube-system:default&rdquo; cannot get resource &ldquo;namespaces&rdquo; in API group &quot;&rdquo; in the namespace &ldquo;monitoring&rdquo;]]></description></item></channel></rss>