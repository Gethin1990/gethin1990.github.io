<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>计算机基础 - 分类 - Gethin</title><link>https://blog.gethin.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link><description>计算机基础 - 分类 - Gethin</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 10 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.gethin.online/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/" rel="self" type="application/rss+xml"/><item><title>HTTP 响应代码</title><link>https://blog.gethin.online/http-status-code/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>xxxx</author><guid>https://blog.gethin.online/http-status-code/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/web-3967926_1280-2021-06-10-16-37-50.jpg" referrerpolicy="no-referrer">
            </div><h2 id="http-响应代码">HTTP 响应代码</h2>
<p>HTTP 响应状态代码指示特定 HTTP 请求是否已成功完成。</p>
<p>响应分为五类：</p>
<ul>
<li>信息响应(100–199)</li>
<li>成功响应(200–299)</li>
<li>重定向(300–399)</li>
<li>客户端错误(400–499)</li>
<li>服务器错误 (500–599)</li>
</ul>
<p>状态代码由 section 10 of RFC 2616定义</p>
<h2 id="信息响应">信息响应</h2>
<h3 id="100-continue">100 Continue</h3>
<p>这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。</p>
<h3 id="101-switching-protocol">101 Switching Protocol</h3>
<p>该代码是响应客户端的 Upgrade (en-US) 标头发送的，并且指示服务器也正在切换的协议。</p>
<h3 id="102-processing-webdav-en-us">102 Processing (WebDAV (en-US))</h3>
<p>此代码表示服务器已收到并正在处理该请求，但没有响应可用。</p>
<h3 id="103-early-hints">103 Early Hints</h3>
<p>此状态代码主要用于与Link 链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源。</p>
<h2 id="成功响应">成功响应</h2>
<h3 id="200-ok">200 OK</h3>
<p>请求成功。成功的含义取决于HTTP方法：</p>
<ul>
<li>GET：资源已被提取并在消息正文中传输。</li>
<li>HEAD：实体标头位于消息正文中。</li>
<li>POST：描述动作结果的资源在消息体中传输。</li>
<li>TRACE：消息正文包含服务器收到的请求消息</li>
</ul>
<h3 id="201-created">201 Created</h3>
<p>该请求已成功，并因此创建了一个新的资源。这通常是在POST请求，或是某些PUT请求之后返回的响应。</p>
<h3 id="202-accepted">202 Accepted</h3>
<p>请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</p>
<h3 id="203-non-authoritative-information">203 Non-Authoritative Information</h3>
<p>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</p>
<h3 id="204-no-content">204 No Content</h3>
<p>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</p>
<h3 id="205-reset-content">205 Reset Content</h3>
<p>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</p>
<h3 id="206-partial-content">206 Partial Content</h3>
<p>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。</p>]]></description></item></channel></rss>