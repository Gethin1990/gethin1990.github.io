<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>架构艺术 - 分类 - Gethin</title><link>https://blog.gethin.online/categories/%E6%9E%B6%E6%9E%84%E8%89%BA%E6%9C%AF/</link><description>架构艺术 - 分类 - Gethin</description><generator>Hugo -- gohugo.io</generator><managingEditor>gexu1990@hotmail.com (Gethin)</managingEditor><webMaster>gexu1990@hotmail.com (Gethin)</webMaster><lastBuildDate>Mon, 16 Aug 2021 10:52:39 +0800</lastBuildDate><atom:link href="https://blog.gethin.online/categories/%E6%9E%B6%E6%9E%84%E8%89%BA%E6%9C%AF/" rel="self" type="application/rss+xml"/><item><title>软件架构模式</title><link>https://blog.gethin.online/software-architecture-pattern/</link><pubDate>Mon, 16 Aug 2021 10:52:39 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/software-architecture-pattern/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>应用场景 单体架构  好处  容易理解、开发、测试 容易部署 合适小范围项目   不足  紧密耦合 容易产生复杂代码 所有子域都一刀切    N-tier  Summary  多层次 层适合特殊的任务 层可以在物理上分离 技术层并不是逻辑上的层 技术边界分层   Typical: 3层架构  显示层(UI &amp; 单纯的UI逻辑) 逻辑层(业务逻辑) 数据层   Advantages  开发独立 易扩展   Disadvantages  改动会影响各个层级    Service-Oriented  Summary  多服务 每个服务都是一个业务活动 服务可以组合 协议统一标准 企业服务总线   Advantages  服务是松散耦合的 可扩展性好 没有功能重复   Disadvantages  降低敏捷性和团队自主性 费用比较高 会有许多不同的观点    Microservices  Summary  多服务 每个服务都是一个业务活动 以团队形式提供服务 没有重逻辑的企业总线 自动化最大化   Advantages  服务是松散耦合的，易于扩展 灵活性高 可靠性高 设计了故障处理机制   Disadvantages  边界并不总是清晰的 交互可能会变得很复杂    Serverless  Summary  Backend as a service Function as a service    peer-to-peer  Summary  去中心化 没有固定的连接 动态发现的   Advantages  分享资源 节约成本 可缩放   Disadvantages  可能存在安全问题 只适用于特殊场景 代码比较重    应用程序架构模式 分层  Summary  显示层(UI) 应用层(Translation between UI &amp; busniess) 业务层(Business logic) 持久层(Code to interact with the database) 数据层(Data)   Advantages  开发之间容易理解 容易组织代码   Disadvantages  可能导致单体应用 需要撰写大量代码    Microkernel  Summary  执行任务 工作流 数据处理 浏览界面 图形设计   Advantages  灵活 边界清晰 容易分组 运行过程中容易添加和删除功能   Disadvantages  核心 API 不一定适应未来的插件 插件可以被信任吗 并不总是清楚什么是属于核心代码    CQRS  Summary  命令查询责任分离 2 模式: 读/查询 &amp; 写/命令 允许特定场景查询 有同步要求 与事件源模式不同   Advantages  容易查询 更快、更可扩展的读取查询 更容易对接   Disadvantages  添加数据比较复杂 有学习曲线 可能数据不一致 最终一致性    Event sourcing  Summary  存储事件而不是当前状态 Event = 发生在过去的事情 Rehydration or replay   Advantages  跟踪事件 数据轨迹 业务语言 事件重演   Disadvantages  重演事件 和 外部系统 事件结构的变化 快照    CQRS and Event sourcing combined  Summary  2个不同的概念 强强联合 它不适用于简单的域，您可以从事件溯源开始，然后再添加 CQRS。   Advantages  简单快速查询 可扩展的 事件跟踪 数据轨迹 商业语言   Disadvantages  增加复杂度 学习曲线 数据不一致 事件结构变化    UI Patterns MVC  Summary  Controller Model View   Advantages  关注点分离 并行开发 流行的框架   Disadvantages  控制器可能会变得臃肿 不同的定义    MVP  Summary  View Presenter Model   Advantages  对桌面开发友好 关注点分离 测试性好   Disadvantages  Presenter层变得臃肿 桌面开发不流行 MVVM Pattern    MVVM  Summary  View ViewModel Model   Advantages  现代桌面和移动开发友好 关注点分离 测试性好   Disadvantages  UI过度 难以调试 桌面开发不流行    ]]></description></item><item><title>设计模式</title><link>https://blog.gethin.online/design-pattern/</link><pubDate>Sun, 15 Aug 2021 15:10:00 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/design-pattern/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>设计模式六大原则 单一职责原则 Single Responsibility Principle
一个类只负责一个功能领域中的相应职责，或者就一个类而言，应该只有一个引起它变化的原因。
开放封闭原则 Open-Close Priciple
一个软件实体应当对扩展开放，对修改封闭。软件实体应该尽量在不修改原有代码的情况下进行扩展。
里氏替换原则 Liskove Substitution Principe
所有引用基类的地方必须能透明的使用其子类的对象。（在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。例如：我喜欢动物，那我一定喜欢狗，因为狗是动物的子类；但是我喜欢狗，不能据此断定我喜欢动物，因为我并不喜欢老鼠，虽然它也是动物）
依赖倒置原则 Dependency Inversion Principle
抽象不应该依赖于细节，细节应该依赖于抽象，要针对接口编程，而不是针对实现编程。（依赖注入(DependencyInjection, DI)的方式注入到其他对象中，依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。常用的注入方式有三种，分别是：构造注入，设值注入（Setter注入）和接口注入。构造注入是指通过构造函数来传入具体类的对象，设值注入是指通过Setter方法来传入具体类的对象，而接口注入是指通过在接口中声明的业务方法来传入具体类的对象。这些方法在定义时使用的是抽象类型，在运行时再传入具体类型的对象，由子类对象来覆盖父类对象）
接口隔离原则 Interface Segregation Principle
使用多个专用接口，而不是使用单一的总接口，客户端不应该依赖于那些它不需要的接口。
迪米特法则 Law of Demeter
一个软件实体应当尽可能少的与其他实体发生互相作用（高内聚，低耦合）。
为什么要多用组合，少用继承 变化部分取出并封装起来，便于以后扩展，而不影响其他部分。要针对接口编程而不是针对实现编程。
一句话常用设计模式 Iterator——迭代器 Adapter（适配器）————换个包装再度利用 ◎ 万事交给子类：
Template Method（模板方法）————实际处理就交给子类 Factory Method（工厂方法）————建立对象实例交给子类 ◎建立对象实例
Singleton（单件）————唯一的对象实例 Prototype（原型）————复制建立对象实例 Builder（生成器）————组合复杂的对象实例 Abstract Factory（抽象工厂）————把相关零件组合成产品 ◎切割性思考
Bridge（桥接）————分成功能层次和实现层次 Strategy（策略）————把算法整个换掉 ◎一视同仁</description></item><item><title>UML设计与基本概念</title><link>https://blog.gethin.online/uml-design/</link><pubDate>Wed, 23 Jun 2021 20:18:17 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/uml-design/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>UML 的各种图 UML 又称为统一建模语言，是为面向对象开发系统进行说明、可视化的一种标准语言。
UML 的分类如下：
 UML  用例视图  用例图   设计视图  类图 对象图   进程视图  时序图 协作图 状态图 活动图   实现视图  构件图   拓扑视图  部署图       用例图 类图 类图是描述类与类之间的关系，在类图里有常见的六种关系。分别是泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)
各种关系的强弱顺序： 泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖
 泛化（一种继承关系）
例如：动物 -&gt; 老虎
 实现（类与接口的关系，表示接口的实现）
例如：鸟 -&gt; 燕子
 聚合（部分和整体的关系，但部分可以脱离整体单独存在）]]></description></item><item><title>[转载]Redis面试题</title><link>https://blog.gethin.online/redis-reprinted/</link><pubDate>Fri, 04 Jun 2021 21:06:39 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/redis-reprinted/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/redis-2021-06-04-21-41-23.jpg" referrerpolicy="no-referrer">
&lt;/div>概述 什么是Redis Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。
Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。
与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。
Redis有哪些优缺点 优点
读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。 支持数据持久化，支持AOF和RDB两种持久化方式。 支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。 数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。 支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。 缺点
数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。 Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。 主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。 Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。 为什么要用 Redis /为什么要用缓存 主要从“高性能”和“高并发”这两点来看待这个问题。
高性能：
假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！
高并发：
直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。
为什么要用 Redis 而不用 map/guava 做缓存? 缓存分为本地缓存和分布式缓存。以 Java 为例，使用自带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。
使用 redis 或 memcached 之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数据，缓存具有一致性。缺点是需要保持 redis 或 memcached服务的高可用，整个程序架构上较为复杂。</description></item><item><title>[转载]消息中间件MQ与RabbitMQ面试题</title><link>https://blog.gethin.online/rabbitmq-reprinted/</link><pubDate>Fri, 04 Jun 2021 10:58:43 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/rabbitmq-reprinted/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/RabbitMQ-2021-06-04-13-49-43.jpg" referrerpolicy="no-referrer">
&lt;/div>为什么使用MQ？MQ的优点 简答
异步处理 - 相比于传统的串行、并行方式，提高了系统吞吐量。 应用解耦 - 系统间通过消息通信，不用关心其他系统的处理。 流量削锋 - 可以通过消息队列长度控制请求量；可以缓解短时间内的高并发请求。 日志处理 - 解决大量日志传输。 消息通讯 - 消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。 详答
主要是：解耦、异步、削峰。
解耦：A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃…A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。
就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦。
异步：A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求。如果使用 MQ，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms。</description></item><item><title>软件架构设计</title><link>https://blog.gethin.online/software-architecture-design/</link><pubDate>Sat, 29 May 2021 21:01:34 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/software-architecture-design/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>1 软件架构概述 1.1 软件架构的定义 架构是对系统的抽象，由多个架构组成，任何软件都存在架构，元素与其行为的集合构成架构内容，架构具有“基础性”，架构隐含有“决策”。
1.2 软件架构重要性 项目关系人之间交流平台；
早期设计决策；
在较高层面上实现软件复用；
架构对开发的指导与规范意义不容忽略。
1.3 架构的模型 结构模型；框架模型；动态模型；过程模型；功能模型；
逻辑视图，开发视图，进程视图，物理视图，场景。
2 架构需求与软件质量属性 2.1 软件质量属性 功能性；可靠性；易用性；效率；可维护性；可移植性；
1 运行期质量属性
性能；安全性；易用性；可伸缩性；互操作性；可靠性；持续可用性；鲁棒性；
2 开发期质量属性
易理解性；可扩展性；可重用性；可测试性；可维护性；
2.2 六个质量属性与实现 质量属性：可用性；可修改性；性能；安全性；可测试性；易用性；
质量属性场景组件：刺激源；刺激；环境；制品；响应；响应度量；
1 可用性与其实现战术
可用性描述
可用性战术
错误检测：命令/响应；心跳；异常；
错误恢复
表决；主动冗余；被动冗余；备件；状态再同步；检查点/回滚；
错误预防
从服务中删除；事务；进程监视器； 2 可修改性与其实现战术
可修改性描述
可修改性战术
局部化修改；(维持语义的一致性；预期期望的变更；泛化该模块；限制可能的选择)
防止连锁反应；（信息隐藏；维持现有的接口；限制通信路径；仲裁者的使用）
推迟绑定时间；（运行时注册；配置文件；多态；构件更换；） 3 性能与其实现技术
性能描述
性能战术
资源消耗：闭锁时间；
资源需求：减少处理事件流所需的资源；减少所处理事件的数量；控制资源的使用；
资源管理：引入并发；维持数据或计算的多个副本；增加可用资源；
资源仲裁：先进先出；固定优先级调度；动态优先级调度；静态调度； 4 安全性与其实现技术
安全性描述
安全性战术
抵抗攻击：对用户进行身份验证；对用户进行授权；维护数据的机密性；维护完整性；限制暴露的信息；限制访问；
检测攻击
从攻击中恢复：恢复；识别攻击者； 5 可测试性与其实现战术</description></item></channel></rss>