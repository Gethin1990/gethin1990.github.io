<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>语言与平台 - 分类 - Gethin</title><link>https://blog.gethin.online/categories/%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%B9%B3%E5%8F%B0/</link><description>语言与平台 - 分类 - Gethin</description><generator>Hugo -- gohugo.io</generator><managingEditor>gexu1990@hotmail.com (Gethin)</managingEditor><webMaster>gexu1990@hotmail.com (Gethin)</webMaster><lastBuildDate>Thu, 24 Jun 2021 15:12:06 +0800</lastBuildDate><atom:link href="https://blog.gethin.online/categories/%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%B9%B3%E5%8F%B0/" rel="self" type="application/rss+xml"/><item><title>CSS 基础</title><link>https://blog.gethin.online/css_basic/</link><pubDate>Thu, 24 Jun 2021 15:12:06 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/css_basic/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/20210625132354-2021-06-25-13-23-55.png" referrerpolicy="no-referrer">
&lt;/div>本文总结了CSS的基础知识</description></item><item><title>HTML 基础</title><link>https://blog.gethin.online/html_basic/</link><pubDate>Thu, 24 Jun 2021 09:37:57 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/html_basic/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/20210625132949-2021-06-25-13-29-50.png" referrerpolicy="no-referrer">
&lt;/div>本文主要是总结了HTML的相关基础知识和常用标签。</description></item><item><title>phonics</title><link>https://blog.gethin.online/phonics/</link><pubDate>Sun, 16 May 2021 09:13:14 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/phonics/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>自然拼读 元音 a am pam sam ad dad at cat rat an van man ran ap cap nap lap ab cab lab tab ag bag rag wag ack jack back sack pack ant pant Kant rant ang bang hang sang ank bank rank sank tank amp lamp camp ramp e ed Ted red en ten hen ell bell sell eg egg meg leg beg et jet get wet ess Bess less mess end bend mend send ent Kent bent sent went tent est best pest nest test west eck neck peck deck i id Sid kid ig pig dig ill Jill hill kill it sit fit hit pit im Tim Jim Kim dim in fin win tin pin ing ding ring king sing ink pink sink link ish fish dish wish ick pick kick sick tick Rick o ox fox box ot pot hot op hop top ob Bob job rob od nod pod rod og hog jog log om Tom mom ock rock sock lock u ug bug mug un run sun ut hut nut ub cub rub tub um gum hum mum uck duck luck tunk ump bump hump jump unch lunch munch punch</description></item><item><title>.NET 本质论</title><link>https://blog.gethin.online/dotnet-essentialism/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/dotnet-essentialism/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>声明：本文仅用做复习整理知识，在下列文章中进行二次加工，大部分内容整理自： https://www.cnblogs.com/edisonchou/p/4787775.html https://zhuanlan.zhihu.com/p/38799766
  .NET 本质论  .NET中所有类型的基类是什么 值类型和引用类型的区别 装箱和拆箱的原理 struct和class的区别，struct适用于哪些场合 C#中方法的参数传递有哪几种方式 浅复制和深复制的区别 .NET中栈和堆的差异 执行string abc=&quot;aaa&quot;+&quot;bbb&quot;+&quot;ccc&quot;共分配了多少内存 托管堆内存分配 简要说说.NET中GC的运行机制 GC机制中如何判断一个对象仍然在被使用（如何标记） GC中代（Generation）是什么，分为几代（如何移动） GC有什么问题 托管与非托管资源是什么  托管资源 非托管资源   Dispose和Finalize方法在何时被调用（非托管资源回收方法） .NET中的托管堆中是否可能出现内存泄露的现象  大对象的分配 不恰当地保存根引用 不正确的Finalize方法       .NET 本质论 .NET中所有类型的基类是什么 System.Object
值类型和引用类型的区别 所有继承自System.ValueType的类型是值类型，而其他类型都是引用类型。
常用的值类型包括：结构、枚举、整数型、浮点型、布尔型等等。
 赋值时的区别 值类型的变量直接将获得一个真实的数据副本，而对引用类型的赋值仅仅是把对象的引用赋给变量，这样就可能导致多个变量引用到一个对象实例上。 内存分配的区别 引用类型的对象将会在堆上分配内存，而值类型的对象则会在堆栈上分配内存 继承结构的区别  装箱和拆箱的原理 装箱：CLR需要做额外的工作把堆栈上的值类型移动到堆上，这个操作就被称为装箱。
拆箱：装箱操作的反操作，把堆中的对象复制到堆栈中，并且返回其值。
struct和class的区别，struct适用于哪些场合  struct（结构）是值类型，而class（类）是引用类型。 struct与class相比，不具备继承的特性 struct不能有无参数的构造方法（class默认就有），也不能为成员变量定义初始值。  C#中方法的参数传递有哪几种方式  ref关键字：引用传递参数，需要在传递前初始化；（ref 要求参数在传入前被初始化） out关键字：引用传递参数，需要在返回前初始化；（out 要求参数在方法返回前被初始化） params关键字：允许方法在定义时不确定参数的数量。  浅复制和深复制的区别  浅复制：复制一个对象的时候，仅仅复制原始对象中所有的非静态类型成员和所有的引用类型成员的引用。（新对象和原对象将共享所有引用类型成员的实际对象） 深复制：复制一个对象的时候，不仅复制所有非静态类型成员，还要复制所有引用类型成员的实际对象。  .]]></description></item><item><title>PYTHON 技巧</title><link>https://blog.gethin.online/python-quick-grammar/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/python-quick-grammar/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>Python Quick Grammar 1. 变量互换 1 2 3 4  a=1 b=2 a,b=b,a a,b   (2, 1)  2. 连续赋值 1 2  a=b=c=50 a,b,c   (50, 50, 50)  3. 自动解包 1 2  a,b,c=[1,2,3] a,b,c   (1, 2, 3)  1 2 3  a,*others=[1,2,3,4] print(a) print(*others)   1 2 3 4  4. 链式比较 1 2 3  a=10 if(5&lt;a&lt;15): print(a)   10  5.]]></description></item><item><title>PYTHON 学习笔记(Intermediate)</title><link>https://blog.gethin.online/python-learning-intermediate-notes/</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/python-learning-intermediate-notes/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>Python Learning Notes - Intermediate
 4. 序列 4.1 序列 1 索引
1 2  abc=[&#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;,&#34;e&#34;,&#34;f&#34;] print(abc[1])   2 切片（slicing） sname[start🔚step]
1 2  print(abc[1:5]) print(abc[0:5:2])   3 序列相加
1 2  bcd=[&#34;b&#34;,&#34;c&#34;,&#34;d&#34;] print(abc+bcd)   4 乘法
1  print(bcd*5)   5 检查元素
1  print(&#34;b&#34; in bcd)   6 计算序列长度、最大值和最小值
1 2 3  print(len(abc)) print(max(abc)) print(min(abc))   4.2 列表(list) 1 创建和删除]]></description></item><item><title>JUPYTER NOTEBOOK SHORTCUTS</title><link>https://blog.gethin.online/jupyter-notebook-shortcuts/</link><pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/jupyter-notebook-shortcuts/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>Jupyter Notebook Shortcuts
Command model Key Function 作用 Enter take you into edit mode 转入编辑模式 Shift-Enter run the current cell, select below 运行本单元，选中下个单元 Ctrl-Enter run selected cells 运行本单元 Alt-Enter run the current cell, insert below 运行本单元，在其下插入新单元 Y change the cell type to Code 单元转入代码状态 M change the cell type to Markdown 单元转入 markdown 状态 R change the cell type to Raw 单元转入 raw 状态 1 set level 1 title 设定 1 级标题-仅在 markdown 状态下 2 set level 2 title 设定 2 级标题 3 set level 3 title 设定 3 级标题 4 set level 4 title 设定 4 级标题 5 set level 5 title 设定 5 级标题 6 set level 6 title 设定 6 级标题 Up select cell above 选中上方单元 K select cell above 选中上方单元 Down select cell below 选中下方单元 J select cell above 选中下方单元 Shift-K Move selected cells up 连续选择上方单元 Shift-J Move selected cells down 连续选择下方单元 A insert cell above 在上方插入新单元 B insert cell below 在下方插入新单元 X cut selected cells 剪切选中的单元 C copy selected cells 复制选中的单元 Shift-V paste cells above 粘贴到上方单元 V paste cells below 粘贴到下方单元 Z undo cell deletion 恢复删除的最后一个单元 D,D delete selected cells 删除选中的单元 Shift-M merge cell below 合并选中的单元 Ctrl-S save and checkpoint 保存当前 NoteBook S Save and Checkpoint 保存当前 NoteBook L toggle line numbers 开关行号 O toggle output 转换输出 Shift-O toggle output scrolling 转换输出滚动 Esc close pager 关闭页面 Q close pager 关闭页面 H show all shortcuts 显示快捷键帮助 Shift-Space scroll notebook up 向上滚动 Space scroll notebook down 向下滚动 Edit Mode Key Function 作用 Tab code completion or indent 代码补全或缩进 Shift-Tab tooltip 提示 Ctrl-] indent 缩进 Ctrl-[ dedent 解除缩进 Ctrl-A select all 全选 Ctrl-Z undo 撤销 Ctrl-Shift-Z redo 重做 Ctrl-Y redo 重做 Ctrl-Home go to cell start 跳到单元开头 Ctrl-Up go to cell start 跳到单元开头 Ctrl-End go to cell end 跳到单元末尾 Ctrl-Down go to cell end 跳到单元末尾 Ctrl-Left go one word left 跳到左边一个字首 Ctrl-Right go one word right 跳到右边一个字首 Ctrl-Backspace delete word before 删除前面一个字 Ctrl-Delete delete word after 删除后面一个字 Esc command mode 切换到命令模式 Ctrl-M command mode 切换到命令模式 Shift-Enter run cell, select below 运行本单元，选中下一单元 Ctrl-Enter run cell 运行本单元 Alt-Enter run cell, insert below 运行本单元，在下面插入一单元 Ctrl-Shift- - split cell 分割单元 Ctrl-Shift-Subtract split cell 分割单元 Ctrl-S Save and Checkpoint 保存当前 NoteBook Up move cursor up or previous cell 光标上移或转入上一单元 Down move cursor down or next cell 光标下移或转入下一单元 Ctrl-/ toggle comment on current or selected lines 注释整行/撤销注释 Written with StackEdit.</description></item><item><title>PYTHON 学习笔记(Junior)</title><link>https://blog.gethin.online/python-learning-notes/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/python-learning-notes/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>Python Learning Notes - Junior
 1. python 入门 1.1. 注释  单行注释 # 注释内容 多行注释 &quot;&quot;&quot;注释内容&quot;&quot;&quot; 中文编码声明注释 # coding=utf-8  1.2. 代码缩进 采用代码缩进和冒号“：”区分代码之间的层次，python 对代码缩进非常严格，如果不合理缩进会抛出 SyntaxError 异常。
1.3. 代码规范 1.3.1. 编写规范   每个 import 只导入一个模块
  不要再行尾添加分号“；”
  仅以每行不超过 80 个字符；如果超过，仅以使用小括号“（）”
  使用必要的空行可以提高代码可读性
  通常情况下，运算符两侧、函数参数之间、逗号“，”两侧建议使用空格进行分隔
  应该避免在循环中使用+和+=运算符累加字符串，推荐做法是将每个字符串加入列表，然后再循环结束后使用 join 方法连接列表。
  适当的使用一场处理提高程序容错性
  1.3.2. 命名规范   模块名尽量短小，并且全部使用小写字母，可以使用下划线分割多个字母 如：game_main
  包名尽量短小，并且全部使用小写字母，不推荐使用下划线，如：com.cr]]></description></item><item><title>Gatsby基础知识（下）</title><link>https://blog.gethin.online/gatsby-basic-knowledge-3/</link><pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/gatsby-basic-knowledge-3/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>这篇文章主要是翻译和记录了一些 Gateby 的基础知识，有助于开发者通过这些基础知识进行快速的开发
Refer to the Article: https://mpolinowski.github.io/gatsby-js-knowledgebase
10 添加文件数据(Adding File Data) 使用 Gatsby，您可以使用 GraphQL 直接从文件中查询数据。 Transformer插件将文件节点转换为各种其他类型的数据，例如 gatsby-transformer-json 将 将JSON 文件转换为 JSON 数据节点，而 gatsby-transformer-remark 将 将markdown 文件转换为 MarkdownRemark 节点，您可以从中查询 Markdown 的 的HTML 表示形式。 在这里，我们将使用gatsby-source-filesystem从我们的文件系统创建文件节点。
1 npm install --save gatsby-source-filesystem 安装后，将插件添加到 gatsby-config.js。 您可以具有此插件的多个实例，以从文件系统上的不同位置读取源节点。
以下设置了 Jekyll 模式：具有 Markdown 文件的页面目录和.json，.yaml，.csv 的数据目录：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 { resolve: `gatsby-source-filesystem`, options: { name: `pages`, path: `${__dirname}/src/pages/`, }, }, { resolve: `gatsby-source-filesystem`, options: { name: `data`, path: `${__dirname}/src/data/`, }, } 现在，您可以打开 GraphiQL 调试器-在大括号中，当你开始键入 allFiles 时，它应提供自动补全功能。 只需按 Enter 接受，然后再次按 CTRL + ENTER 填写所有页面 ID 的查询：</description></item><item><title>Gatsby基础知识（中）</title><link>https://blog.gethin.online/gatsby-basic-knowledge-2/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/gatsby-basic-knowledge-2/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>这篇文章主要是翻译和记录了一些 Gateby 的基础知识，有助于开发者通过这些基础知识进行快速的开发
Refer to the Article: https://mpolinowski.github.io/gatsby-js-knowledgebase
 06 属性传递(Passing down Props) 现在，我们可以从父组件传递属性到Counter组件。例： 我们可以通过显示的页面来更改我们的Counter 标题。
6.1 更改头部 1  &lt;Counter header=&#34;This is the Index Counter&#34; /&gt;   这个header的属性现在可以用在Counter组件中的render方法。现在我们可以通过调用他的父组件来为Counter组件获取不同的标头了。
1 2 3 4 5 6 7 8  render() { return &lt;div&gt; &lt;h3&gt;{this.props.header}&lt;/h3&gt; &lt;p&gt;current count: {this.state.count}&lt;/p&gt; &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;plus&lt;/button&gt; &lt;button onClick={() =&gt; this.setState({ count: this.state.count - 1 })}&gt;minus&lt;/button&gt; &lt;/div&gt; }   6.]]></description></item></channel></rss>