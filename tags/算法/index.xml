<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>算法 - 标签 - Gethin</title><link>https://blog.gethin.online/tags/%E7%AE%97%E6%B3%95/</link><description>算法 - 标签 - Gethin</description><generator>Hugo -- gohugo.io</generator><managingEditor>gexu1990@hotmail.com (Gethin)</managingEditor><webMaster>gexu1990@hotmail.com (Gethin)</webMaster><lastBuildDate>Fri, 10 Sep 2021 16:02:36 +0800</lastBuildDate><atom:link href="https://blog.gethin.online/tags/%E7%AE%97%E6%B3%95/" rel="self" type="application/rss+xml"/><item><title>算法-思想</title><link>https://blog.gethin.online/algorithm-thinking/</link><pubDate>Fri, 10 Sep 2021 16:02:36 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/algorithm-thinking/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div> https://github.com/Gethin1990/leetcode_101
算法思想 分治 贪心算法 理论基础 简单题目 序列问题 股票 两个维度权衡问题 区间问题 其他问题 动态规划 基础题目 背包问题 01背包 完全背包 多重背包 打家劫舍 股票问题 子序列问题 不连续子序列 连续子序列 编辑距离 回文 回溯算法 组合 分割 子集 排列 棋盘问题 其他 深度优先 分支界限法 广度优先 二分查找 排序 冒泡排序 选择排序 插入排序 归并排序 堆排序 双指针 数学问题 位运算 算法思想 分治 为运算表达式设计优先级|241| 贪心算法 分发饼干|455| 分发糖果|135| 五重叠区间|435| 理论基础 简单题目 分发饼干|455| K次取反后最大化的数组和|1005| 柠檬水找零|860| 序列问题 摆动序列|376| 单调递增的数字|738| 股票 买卖股票的最佳时机|122| 买卖股票的最佳时机含手续费|714| 两个维度权衡问题 分发糖果|135| 根据身高重建队列|406| 区间问题 跳跃游戏|55| 跳跃游戏2|45| 用最少数量的箭引爆气球|452| 五重叠区间|435| 划分字母区间|763| 合并区间|56| 其他问题 最大子序和|53| 加油站|134| 监控二叉树|968| 动态规划 基础题目 斐波那契数|509| 爬楼梯|70| 适用最小花费爬楼梯|746| 不同路径|62| 不同路径2|63| 整数拆分|343| 不同的二叉搜索树|96| 背包问题 01背包 分割等和子集|416| 最后一块石头的重量2|1049 目标和|494| 一和零|474| 完全背包 零钱兑换2|518| 组合总和5|377| 爬楼梯|70| 零钱兑换|322| 完全平方数|279| 单词拆分|139| 多重背包 打家劫舍 打家劫舍|198| 打家劫舍2|213| 打家劫舍3|337| 股票问题 买卖股票的最佳时机|121| 买卖股票的最佳时机|122| 买卖股票的最佳时机|123| 买卖股票的最佳时机|188| 最佳买卖股票时机含冷冻期|309 最佳买卖股票时机含手续费|714| 子序列问题 不连续子序列 最长上升子序列|300| 最长公共子序列|1143| 不相交的线|1035| 连续子序列 最长连续递增序列|674| 最长重复子数组|718| 最大子序和|53| 编辑距离 判断子序列|392| 不同子序列|115| 两个字符串的删除操作|583| 编辑距离|72| 回文 回文字串|647| 最长回文子序列|516| 回溯算法 全排列|46| 组合|77| 单词搜索|79| 组合 组合|77| 电话号码的字母组合|17| 组合总和|39| 组合总和2|40| 组合总和3|216| 分割 分割回文串|131| 复原IP地址|93| 子集 子集|78| 子集2|90| 排列 全排列|46| 全排列2|47| 棋盘问题 N皇后|51| 解数独|37| 其他 递增子序列|491| 重新安排行程|332| 深度优先 岛屿的最大面积|695| 省份数量|547| 分支界限法 广度优先 最短的桥|934| 二分查找 Sqrt(x)|69| Find First and Last Position of Element in Sorted Array|34| Search in Rotated Sorted Array II|81| 排序 冒泡排序 选择排序 插入排序 归并排序 堆排序 双指针 Two Sum II - Input array is sorted|167| Merge Sorted Array |88| Linked List Cycle II|142| MinimumWindow Substring|76| 数学问题 位运算</description></item><item><title>算法-数据结构</title><link>https://blog.gethin.online/algorithm-data-structure/</link><pubDate>Fri, 10 Sep 2021 16:02:36 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/algorithm-data-structure/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>https://github.com/Gethin1990/leetcode_101
数据结构 数组 二分查找 双指针 滑动窗口 链表 链表的理论 链表的种类 链表的存储方式 链表操作 数组和链表在不同场景下的性能分析 链表的经典题目 虚拟头节点(哨兵节点) 链表的基本操作 反转链表 环形链表 哈希表 哈希表介绍 哈希函数 哈希碰撞 常见的三种哈希结构 数组作为哈希表 set作为哈希表 map作为哈希表 字符串 什么是字符串 要不要使用库函数 双指针法、反转系列 KMP 栈和队列 栈与队列的理论基础 栈经典题目 栈在系统中的应用 括号匹配问题 字符串去重问题 逆波兰表达式问题 队列的经典题目 滑动窗口最大值问题 求前 K 个高频元素 二叉树 二叉树的遍历方式 二叉树的属性 二叉树的修改与构造 求二叉搜索树的属性 二叉树公共祖先问题 二叉搜索树的修改和构造 图 数据结构 数组 找到所有数组中消失的数字|448| 旋转图像|48| 搜索二维矩阵 II|240| 最多能完成排序的块|769| 二分查找 搜索插入位置|35| 双指针 移除元素|27| 滑动窗口 长度最小的子数组|209| 链表 反转链表|206| 合并两个有序链表|21| 两两交换链表中的节点|24| 相交链表|160| 回文链表|234| 链表的理论 链表的种类 单链表、双链表、循环链表</description></item><item><title>[转载]五大算法设计思想</title><link>https://blog.gethin.online/five-algorithms-design-ideas/</link><pubDate>Mon, 30 Aug 2021 10:55:43 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/five-algorithms-design-ideas/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>分治法 分治法概念 将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。
分治法思想策略 对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其分解为k个规模较小的子问题，这些子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问题的解合并得到原问题的解。
分治法特征 该问题的规模缩小到一定的程度就可以容易地解决 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。 利用该问题分解出的子问题的解可以合并为该问题的解； 该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。 第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加；
第二条特征是应用分治法的前提它也是大多数问题可以满足的，此特征反映了递归思想的应用；
第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法。
第四条特征涉及到分治法的效率，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但一般用动态规划法较好。
分治法基本步骤 1 分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题；
2 解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题
3 合并：将各个子问题的解合并为原问题的解。
适用分治法求解的经典问题 1）二分搜索 2）大整数乘法 3）Strassen矩阵乘法 4）棋盘覆盖 5）合并排序 6）快速排序 7）线性时间选择 8）最接近点对问题 9）循环赛日程表 10）汉诺塔 动态规划 动态规划概念 每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。
动态规划思想策略 将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。
在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。
动态规划特征 能采用动态规划求解的问题的一般要具有3个性质：
(1) 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。
(2) 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。
(3) 有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）
动态规划基本步骤 （1）分析最优解的性质，并刻画其结构特征。
（2）递归的定义最优解。
（3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值
（4）根据计算最优值时得到的信息，构造问题的最优解
适用动态规划求解的经典问题 矩阵连乘， 走金字塔 最长公共子序列(LCS) ， 最长递增子序列(LIS) ， 凸多边形最优三角剖分 ， 背包问题 ， 双调欧几里得旅行商问题 贪心法 贪心法概念 在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。</description></item></channel></rss>