<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>架构 - 标签 - Gethin</title><link>https://blog.gethin.online/tags/%E6%9E%B6%E6%9E%84/</link><description>架构 - 标签 - Gethin</description><generator>Hugo -- gohugo.io</generator><managingEditor>gexu1990@hotmail.com (Gethin)</managingEditor><webMaster>gexu1990@hotmail.com (Gethin)</webMaster><lastBuildDate>Mon, 16 Aug 2021 10:52:39 +0800</lastBuildDate><atom:link href="https://blog.gethin.online/tags/%E6%9E%B6%E6%9E%84/" rel="self" type="application/rss+xml"/><item><title>软件架构模式</title><link>https://blog.gethin.online/software-architecture-pattern/</link><pubDate>Mon, 16 Aug 2021 10:52:39 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/software-architecture-pattern/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>应用场景 单体架构  好处  容易理解、开发、测试 容易部署 合适小范围项目   不足  紧密耦合 容易产生复杂代码 所有子域都一刀切    N-tier  Summary  多层次 层适合特殊的任务 层可以在物理上分离 技术层并不是逻辑上的层 技术边界分层   Typical: 3层架构  显示层(UI &amp; 单纯的UI逻辑) 逻辑层(业务逻辑) 数据层   Advantages  开发独立 易扩展   Disadvantages  改动会影响各个层级    Service-Oriented  Summary  多服务 每个服务都是一个业务活动 服务可以组合 协议统一标准 企业服务总线   Advantages  服务是松散耦合的 可扩展性好 没有功能重复   Disadvantages  降低敏捷性和团队自主性 费用比较高 会有许多不同的观点    Microservices  Summary  多服务 每个服务都是一个业务活动 以团队形式提供服务 没有重逻辑的企业总线 自动化最大化   Advantages  服务是松散耦合的，易于扩展 灵活性高 可靠性高 设计了故障处理机制   Disadvantages  边界并不总是清晰的 交互可能会变得很复杂    Serverless  Summary  Backend as a service Function as a service    peer-to-peer  Summary  去中心化 没有固定的连接 动态发现的   Advantages  分享资源 节约成本 可缩放   Disadvantages  可能存在安全问题 只适用于特殊场景 代码比较重    应用程序架构模式 分层  Summary  显示层(UI) 应用层(Translation between UI &amp; busniess) 业务层(Business logic) 持久层(Code to interact with the database) 数据层(Data)   Advantages  开发之间容易理解 容易组织代码   Disadvantages  可能导致单体应用 需要撰写大量代码    Microkernel  Summary  执行任务 工作流 数据处理 浏览界面 图形设计   Advantages  灵活 边界清晰 容易分组 运行过程中容易添加和删除功能   Disadvantages  核心 API 不一定适应未来的插件 插件可以被信任吗 并不总是清楚什么是属于核心代码    CQRS  Summary  命令查询责任分离 2 模式: 读/查询 &amp; 写/命令 允许特定场景查询 有同步要求 与事件源模式不同   Advantages  容易查询 更快、更可扩展的读取查询 更容易对接   Disadvantages  添加数据比较复杂 有学习曲线 可能数据不一致 最终一致性    Event sourcing  Summary  存储事件而不是当前状态 Event = 发生在过去的事情 Rehydration or replay   Advantages  跟踪事件 数据轨迹 业务语言 事件重演   Disadvantages  重演事件 和 外部系统 事件结构的变化 快照    CQRS and Event sourcing combined  Summary  2个不同的概念 强强联合 它不适用于简单的域，您可以从事件溯源开始，然后再添加 CQRS。   Advantages  简单快速查询 可扩展的 事件跟踪 数据轨迹 商业语言   Disadvantages  增加复杂度 学习曲线 数据不一致 事件结构变化    UI Patterns MVC  Summary  Controller Model View   Advantages  关注点分离 并行开发 流行的框架   Disadvantages  控制器可能会变得臃肿 不同的定义    MVP  Summary  View Presenter Model   Advantages  对桌面开发友好 关注点分离 测试性好   Disadvantages  Presenter层变得臃肿 桌面开发不流行 MVVM Pattern    MVVM  Summary  View ViewModel Model   Advantages  现代桌面和移动开发友好 关注点分离 测试性好   Disadvantages  UI过度 难以调试 桌面开发不流行    ]]></description></item><item><title>软件架构设计</title><link>https://blog.gethin.online/software-architecture-design/</link><pubDate>Sat, 29 May 2021 21:01:34 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/software-architecture-design/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>1 软件架构概述 1.1 软件架构的定义 架构是对系统的抽象，由多个架构组成，任何软件都存在架构，元素与其行为的集合构成架构内容，架构具有“基础性”，架构隐含有“决策”。
1.2 软件架构重要性 项目关系人之间交流平台；
早期设计决策；
在较高层面上实现软件复用；
架构对开发的指导与规范意义不容忽略。
1.3 架构的模型 结构模型；框架模型；动态模型；过程模型；功能模型；
逻辑视图，开发视图，进程视图，物理视图，场景。
2 架构需求与软件质量属性 2.1 软件质量属性 功能性；可靠性；易用性；效率；可维护性；可移植性；
1 运行期质量属性
性能；安全性；易用性；可伸缩性；互操作性；可靠性；持续可用性；鲁棒性；
2 开发期质量属性
易理解性；可扩展性；可重用性；可测试性；可维护性；
2.2 六个质量属性与实现 质量属性：可用性；可修改性；性能；安全性；可测试性；易用性；
质量属性场景组件：刺激源；刺激；环境；制品；响应；响应度量；
1 可用性与其实现战术
可用性描述
可用性战术
错误检测：命令/响应；心跳；异常；
错误恢复
表决；主动冗余；被动冗余；备件；状态再同步；检查点/回滚；
错误预防
从服务中删除；事务；进程监视器； 2 可修改性与其实现战术
可修改性描述
可修改性战术
局部化修改；(维持语义的一致性；预期期望的变更；泛化该模块；限制可能的选择)
防止连锁反应；（信息隐藏；维持现有的接口；限制通信路径；仲裁者的使用）
推迟绑定时间；（运行时注册；配置文件；多态；构件更换；） 3 性能与其实现技术
性能描述
性能战术
资源消耗：闭锁时间；
资源需求：减少处理事件流所需的资源；减少所处理事件的数量；控制资源的使用；
资源管理：引入并发；维持数据或计算的多个副本；增加可用资源；
资源仲裁：先进先出；固定优先级调度；动态优先级调度；静态调度； 4 安全性与其实现技术
安全性描述
安全性战术
抵抗攻击：对用户进行身份验证；对用户进行授权；维护数据的机密性；维护完整性；限制暴露的信息；限制访问；
检测攻击
从攻击中恢复：恢复；识别攻击者； 5 可测试性与其实现战术</description></item></channel></rss>