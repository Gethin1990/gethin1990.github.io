<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>dotnet - 标签 - Gethin</title><link>https://blog.gethin.online/tags/dotnet/</link><description>dotnet - 标签 - Gethin</description><generator>Hugo -- gohugo.io</generator><managingEditor>gexu1990@hotmail.com (Gethin)</managingEditor><webMaster>gexu1990@hotmail.com (Gethin)</webMaster><lastBuildDate>Tue, 10 Aug 2021 16:09:23 +0800</lastBuildDate><atom:link href="https://blog.gethin.online/tags/dotnet/" rel="self" type="application/rss+xml"/><item><title>.NET CORE</title><link>https://blog.gethin.online/dotnet-core/</link><pubDate>Tue, 10 Aug 2021 16:09:23 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/dotnet-core/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>概述 谈一谈对DDD的理解 DDD，领域驱动设计。就是通过领域来指导软件设计，是一种十分抽象的软件设计思想，它主要分为战略设计和战术设计。
战略方面，通过事件风暴进行领域模型的划分，划分出核心域，子域，支撑域，定义通用语言，划分出界限上下文。
在战术设计方面，ddd将架构分层，“松耦合，高内聚”是架构设计的整体思想。按照DDD思想，可以分为领域层，基础设施层，应用层，接口层。
接口层为前端用户提供api接口。基础设施层可以放一些第三方的服务，数据库连接等内容。
应用层是对领域服务的编排，是很薄的一层（目前我自己的架构，应用的是cqrs，所有的相关逻辑都是放在了应用层，而领域层只是放了实体，因为暂时还不是特别理解领域层的服务和事件都应该写什么）。
领域层包括实体，值对象，聚合根，领域服务，领域事件等内容。
ASP.NET Core 比 ASP.NET 更具优势的地方是什么  跨平台 对框架没有依赖 处理请求效率更高 可以自我寄宿 轻量高性能 可以使用vs；vs code进行开发  ASP.NET Core 主要的特性有哪些  startup 类 依赖关系注入（服务） 中间件 主机 服务器 appsettings.json 配置 选项 环境（dev,stage,prod） Logging 路由 处理错误 发送HTTP请求 静态文件  Startup 什么是dot net core的startup class Startup class是dot net core应用的入口。
所有的dot net core应用必须有这个class。这个类用来配置应用。
这个类的调用是在program main函数里面进行配置的。类的名字可以自己定义。
如何在controller中注入service ConfigureServices 添加 Service；
1  services.TryAddTransient&lt;IDataAccess, DataAccess&gt;();   在controller 添加注入
1 2 3 4 5  private readonly ILogManager _logManager; public HomeController(ILogManager logManager) { _logManager = logManager; }   Startup 类包括哪些配置   ConfigureServices （可选择）方法以配置应用的服务。 服务是一个提供应用功能的可重用组件。 在 ConfigureServices 中注册服务，并通过依赖关系注入 (DI) 或 ApplicationServices 在整个应用中使用服务。]]></description></item><item><title>.NET 本质论</title><link>https://blog.gethin.online/dotnet-essentialism/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/dotnet-essentialism/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>声明：本文仅用做复习整理知识，在下列文章中进行二次加工，大部分内容整理自： https://www.cnblogs.com/edisonchou/p/4787775.html https://zhuanlan.zhihu.com/p/38799766
  .NET 本质论  .NET中所有类型的基类是什么 值类型和引用类型的区别 装箱和拆箱的原理 struct和class的区别，struct适用于哪些场合 C#中方法的参数传递有哪几种方式 浅复制和深复制的区别 .NET中栈和堆的差异 执行string abc=&quot;aaa&quot;+&quot;bbb&quot;+&quot;ccc&quot;共分配了多少内存 托管堆内存分配 简要说说.NET中GC的运行机制 GC机制中如何判断一个对象仍然在被使用（如何标记） GC中代（Generation）是什么，分为几代（如何移动） GC有什么问题 托管与非托管资源是什么  托管资源 非托管资源   Dispose和Finalize方法在何时被调用（非托管资源回收方法） .NET中的托管堆中是否可能出现内存泄露的现象  大对象的分配 不恰当地保存根引用 不正确的Finalize方法       .NET 本质论 .NET中所有类型的基类是什么 System.Object
值类型和引用类型的区别 所有继承自System.ValueType的类型是值类型，而其他类型都是引用类型。
常用的值类型包括：结构、枚举、整数型、浮点型、布尔型等等。
 赋值时的区别 值类型的变量直接将获得一个真实的数据副本，而对引用类型的赋值仅仅是把对象的引用赋给变量，这样就可能导致多个变量引用到一个对象实例上。 内存分配的区别 引用类型的对象将会在堆上分配内存，而值类型的对象则会在堆栈上分配内存 继承结构的区别  装箱和拆箱的原理 装箱：CLR需要做额外的工作把堆栈上的值类型移动到堆上，这个操作就被称为装箱。
拆箱：装箱操作的反操作，把堆中的对象复制到堆栈中，并且返回其值。
struct和class的区别，struct适用于哪些场合  struct（结构）是值类型，而class（类）是引用类型。 struct与class相比，不具备继承的特性 struct不能有无参数的构造方法（class默认就有），也不能为成员变量定义初始值。  C#中方法的参数传递有哪几种方式  ref关键字：引用传递参数，需要在传递前初始化；（ref 要求参数在传入前被初始化） out关键字：引用传递参数，需要在返回前初始化；（out 要求参数在方法返回前被初始化） params关键字：允许方法在定义时不确定参数的数量。  浅复制和深复制的区别  浅复制：复制一个对象的时候，仅仅复制原始对象中所有的非静态类型成员和所有的引用类型成员的引用。（新对象和原对象将共享所有引用类型成员的实际对象） 深复制：复制一个对象的时候，不仅复制所有非静态类型成员，还要复制所有引用类型成员的实际对象。  .]]></description></item></channel></rss>