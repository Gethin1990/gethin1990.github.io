<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - Gethin</title><link>https://blog.gethin.online/posts/</link><description>所有文章 | Gethin</description><generator>Hugo -- gohugo.io</generator><managingEditor>gexu1990@hotmail.com (Gethin)</managingEditor><webMaster>gexu1990@hotmail.com (Gethin)</webMaster><lastBuildDate>Tue, 13 Jul 2021 13:55:03 +0800</lastBuildDate><atom:link href="https://blog.gethin.online/posts/" rel="self" type="application/rss+xml"/><item><title>Ielts Words 3 Words</title><link>https://blog.gethin.online/ielts-words-3-words/</link><pubDate>Tue, 13 Jul 2021 13:55:03 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/ielts-words-3-words/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>Ielts Words 3 Words 注： 不给原翻译，是为了进行联想推意义
 aim -&gt; target ash -&gt; dust bay -&gt; baby: take baby to bay bet -&gt; beg bid -&gt; bed: I bid for a bed. bow -&gt; bowl: 碗比较圆，半圆就是弓 bud -&gt; growth cab -&gt; car: the cab of car dam -&gt; dam up: 坝起——阻拦 dew -&gt; drew: 画画要用水滴 dim -&gt; dark dip -&gt; drop dye -&gt; ink era -&gt; age flu -&gt; ill fry -&gt; dry: 炸干 fry checkin fur -&gt; skin gap -&gt; GAP gas -&gt; 瓦斯的音译 gum -&gt; 路飞 ham -&gt; 汉姆有非常厉害的腿-&gt; 火腿 hay -&gt; hey/dry grass hut -&gt; hurt: 受伤的心屋 ink -&gt; link：用墨水链接 inn -&gt; in hotal jaw -&gt; 教（训） jet -&gt; 路飞 喷气机关枪 jew -&gt; Jesus jog -&gt; dog jog lag -&gt; delay /lag behind lap -&gt; the lap of cap lid -&gt; cap lip -&gt; talk mat -&gt; Matt sit in the mat mop -&gt; 抹布 mud -&gt; 脏 mug -&gt; 马克杯 nap -&gt; cat nap/have a nap nod -&gt; knowed nor -&gt; not oak -&gt; 奥克tree oar -&gt; all oar/boat odd -&gt; (even in math) 1,3,5,7,11 ore -&gt; oar 船桨敲矿石 owl -&gt; bowl 带枭图案的碗 pin -&gt; 钉 pit -&gt; p it/dig it pot -&gt; hot pot rag -&gt; tag the rag raw -&gt; crude rib -&gt; rid rib rid -&gt; rider/remove rob -&gt; stick-up rod -&gt; power/wood rot -&gt; rod rot / decay rub -&gt; mop /rub away =remove rug -&gt; hug/footcloth sew -&gt; saw / seam sin -&gt; gap sly -&gt; sly spy sob -&gt; cry sow -&gt; sow seed tan -&gt; brown/谈棕色 tin -&gt; tin can tip -&gt; keys ton -&gt; 吨 tub -&gt; bucket van -&gt; pioneer/car vex -&gt; 维克斯和维特 via -&gt; through a place wag -&gt; dog wags its tail wax -&gt; max / Candle wit -&gt; brain  ]]></description></item><item><title>英语构词法</title><link>https://blog.gethin.online/language-and-platformlanguage-and-platform/</link><pubDate>Mon, 12 Jul 2021 10:08:12 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/language-and-platformlanguage-and-platform/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>英语六种构词法</description></item><item><title>Ielts Words</title><link>https://blog.gethin.online/ielts-words/</link><pubDate>Mon, 12 Jul 2021 09:08:23 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/ielts-words/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>-- 雅思词汇 学习方法，先从3，4，5，6，7个字母开始背， 后面的直接使用构词法来进行背诵。
3字母 (238个) 0 1 2 3 4 5 6 7 8 9 dot sit row rot ash cup let ill cap rag ski not eve pot dog bay sew yes jaw god fog big son tin via bee six get ore sex you eye wag two flu wit jet too hug jew sea few out bow tie any mat per hut era arm boy win ice gun cow ant spy may van now pan cut lab web tap rod tag sad jar toe bed bit put fan fit gay map rob low oil rug oak fix old oar bet lot fur one wax job day sly inn car rid fee can lie sky pay hey sir top die try hit gum net egg vex lay ink say tub pit tax pie rat gas pen see end joy tip bud fry way dim log sin jog cat him buy pet cry but mad use lap new fat zip its ton war man beg nut lip saw far dad ham act ago tan sow yet why mop mug dye aid nap eat bar her fox bad raw ask toy fun hen box owe ear dry pin bus wet run pop sun tea owl law may aim nod sob sum pig bat lid fly mix nor how air own who all dam gap hay dip hat shy bag jam age ten set lag ray key bid kid odd due dig our hot mud art zoo leg his she cab rib add rub dew 4字母 0 1 2 3 4 5 6 7 8 9 pray tuna sway lame mess evil near dear whip lift fear bear turn coal most hour bang lamb past than tick luck noun baby wool gate pant loom joke cube mist shun full bowl each unit foot cafe heal zero 单词联想 pray|ray|beg|pray for sway|way|wag| evil|do evil|造孽 near|dear|ear|bear fear|afraid lift|life|live|left lamb|lab gate|enter|gap pant|ant mist|fog shun|瞬|避开 heal|cure</description></item><item><title>云上基础架构</title><link>https://blog.gethin.online/introduce-microservice-infrastructure-on-cloud/</link><pubDate>Thu, 08 Jul 2021 12:57:57 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/introduce-microservice-infrastructure-on-cloud/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>云上基础架构  Iaas &amp; Paas &amp; Saas 虚拟机和容器 Docker &amp; Kubernetes 基础架构的关注点 Azure Kubernets Service - AKS     Iaas &amp; Paas &amp; Saas   IaaS 基础架构即服务， 硬件相关的部分由第三方运营，如服务器，存储，网卡等。其他由拥有者来维护。
  PaaS 平台即服务，部分与应用无关的部分由第三方运营，自己的应用程序是基于第三方提供的平台来进行开发维护，但数据和应用程序由拥有者本人来进行管理。
  SaaS 软件即服务，将所有的部分都交给第三方管理，拥有者本身只需要基于应用程序进行配置或是二次开发。
啥是 azure-paas
  虚拟机和容器 虚拟机，用传统开发和部署的方式来运行在服务器上，如IIS，Tomcat等 为什么要选用容器，容器有什么优势么？
 平台独立，一次build，可以运行在各个平台。 资源的效率和利用率比较高 有效的隔离性和可分享性 速度很快，可以在短时间内进行创建，复制和销毁 可以实现平滑的伸缩 操作便捷 改进开发人员的生产力和开发流程 语言独立性  Docker &amp; Kubernetes Docker是时下流行的来实现容器的一种方式。关于容器编排，市场上还有其他的方式，如Azure Service Fabric，Amazon Elastic Container Service
那么我们为什么要选用K8S?
 容器编排 非常适合采用多云方式进行 大规模部署和更新应用程序，以加快产品上市时间（水平自动缩放，滚动更新，Canary部署） 天然支持云原生应用 降低基础设施成本 它可以在本地或混合环境中运行 您可以将Kubernetes集群从一个托管供应商移动到另一个托管供应商，而无需更改（几乎）任何部署和管理过程。 零停机时间部署，容错，高可用性，扩展，调度和自愈功能在Kubernetes中具有重要价值。  基础架构的关注点  服务注册 服务发现 监控 限流 路由 负载均衡 超时重试 熔断 服务降级 故障迁移  Azure Kubernets Service -AKS 1.]]></description></item><item><title>架构师论文摘要</title><link>https://blog.gethin.online/architecture-paper/</link><pubDate>Thu, 08 Jul 2021 12:57:57 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/architecture-paper/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/content.jpg" referrerpolicy="no-referrer">
&lt;/div>架构师论文摘要链接（自用）</description></item><item><title>CSS 基础</title><link>https://blog.gethin.online/css_basic/</link><pubDate>Thu, 24 Jun 2021 15:12:06 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/css_basic/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/20210625132354-2021-06-25-13-23-55.png" referrerpolicy="no-referrer">
&lt;/div>本文总结了CSS的基础知识</description></item><item><title>HTML 基础</title><link>https://blog.gethin.online/html_basic/</link><pubDate>Thu, 24 Jun 2021 09:37:57 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/html_basic/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/20210625132949-2021-06-25-13-29-50.png" referrerpolicy="no-referrer">
&lt;/div>本文主要是总结了HTML的相关基础知识和常用标签。</description></item><item><title>UML设计与基本概念</title><link>https://blog.gethin.online/uml-design/</link><pubDate>Wed, 23 Jun 2021 20:18:17 +0800</pubDate><author>作者</author><guid>https://blog.gethin.online/uml-design/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/content.jpg" referrerpolicy="no-referrer">
            </div>UML 的各种图 UML 又称为统一建模语言，是为面向对象开发系统进行说明、可视化的一种标准语言。
UML 的分类如下：
 UML  用例视图  用例图   设计视图  类图 对象图   进程视图  时序图 协作图 状态图 活动图   实现视图  构件图   拓扑视图  部署图       用例图 类图 类图是描述类与类之间的关系，在类图里有常见的六种关系。分别是泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)
各种关系的强弱顺序： 泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖
 泛化（一种继承关系）
例如：动物 -&gt; 老虎
 实现（类与接口的关系，表示接口的实现）
例如：鸟 -&gt; 燕子
 聚合（部分和整体的关系，但部分可以脱离整体单独存在）]]></description></item><item><title>HTTP 响应代码</title><link>https://blog.gethin.online/http-status-code/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/http-status-code/</guid><description>&lt;div class="featured-image">
&lt;img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/web-3967926_1280-2021-06-10-16-37-50.jpg" referrerpolicy="no-referrer">
&lt;/div>HTTP 响应代码 HTTP 响应状态代码指示特定 HTTP 请求是否已成功完成。
响应分为五类：
信息响应(100–199) 成功响应(200–299) 重定向(300–399) 客户端错误(400–499) 服务器错误 (500–599) 状态代码由 section 10 of RFC 2616定义
信息响应 100 Continue 这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。
101 Switching Protocol 该代码是响应客户端的 Upgrade (en-US) 标头发送的，并且指示服务器也正在切换的协议。
102 Processing (WebDAV (en-US)) 此代码表示服务器已收到并正在处理该请求，但没有响应可用。
103 Early Hints 此状态代码主要用于与Link 链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源。
成功响应 200 OK 请求成功。成功的含义取决于HTTP方法：
GET：资源已被提取并在消息正文中传输。 HEAD：实体标头位于消息正文中。 POST：描述动作结果的资源在消息体中传输。 TRACE：消息正文包含服务器收到的请求消息 201 Created 该请求已成功，并因此创建了一个新的资源。这通常是在POST请求，或是某些PUT请求之后返回的响应。
202 Accepted 请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。
203 Non-Authoritative Information 服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。
204 No Content 服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。
205 Reset Content 服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</description></item><item><title>[转载]C#重构经典全面汇总</title><link>https://blog.gethin.online/refactoring-reprinted/</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://blog.gethin.online/refactoring-reprinted/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/Gethin1990/PicBed/BlogImg/refactoring-reprinted-2021-06-05-19-34-07.jpg" referrerpolicy="no-referrer">
            </div>1. 封装集合  概念：本文所讲的封装集合就是把集合进行封装，只提供调用端需要的接口。
正文：在很多时候，我们都不希望把一些不必要的操作暴露给调用端，只需要给它所需要的操作或数据就行，那么做法就是封装。这个重构在微软的代码库也经常遇到。比如最经典的属性对字段的封装就是一个很好的例子，那么下面我们将看到对集合的封装，如下代码所示，调用端只需要一个集合的信息，而我们则提供了一个IList的集合，大家都知道IList具有对集合的所有操作，所以这会带来很多隐患，最好的做法就是对它进行重构。
那么重构之后，我们把IList换成了IEnumerable，大家都知道只包括一个返回值为IEnumerator的GetEnumerator()方法，所以这样只能遍历取出它的值，而不能对这个集合做出改变，这正是我们所需要的结果，具体代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  using System.Collections.Generic; namespace LosTechies.DaysOfRefactoring.EncapsulateCollection.Before { public class Order { private List&lt;OrderLine&gt; _orderLines; private double _orderTotal; public IList&lt;OrderLine&gt; OrderLines { get { return _orderLines; } } public void AddOrderLine(OrderLine orderLine) { _orderTotal += orderLine.]]></description></item></channel></rss>